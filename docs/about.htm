<!---                               +                                      --->
<html>
<head>
<title>[ AmberSkyNet VR ]</title>
<link rel=stylesheet type=text/css href=ambernet.css>
</style>
</head>
<body>
<center>
<table width=80% border=0><tr><td>
<h1 class=header1><a href=index.htm>[ AmberSkyNet VR ]</a></h1>

<h2 class=header2>Возможности движка</h2>

<p>Нету шейдеров! Нету shadow volume! И projective shadow тоже нет! Ничего нету, зато исходники открыты и структура простая :)
<ul>
<li>Кроссплатформенный движок, собирается под Linux(gcc) и под Win32 (MinGW).
<li>Хорошая масштабируемость и легкая расширяемость собственными модулями.
<li>Возможность сборки как в виде одной библиотеки (dll/so), включающей в себя полный функционал движка,
так и в виде набора библиотек, используя модули, необходимые для реализации конкретной задачи.
</ul>

<ul>
<li>Загрузка и сохранение сцен в XML-формате.
<li>Поддержка скриптового языка Lua.
<li>Отображение с учетом текстур и материалов моделей формата 3ds на сцене.
<li>Воспроизведение спрайтовой анимации (из графических файлов с кадрами анимации).
<li>Формирование ландшафта по карте высот (графического файла).
<li>Формирование ландшафта из raw-файлов формата Second Life.
<li>Загрузка шрифтов из графических файлов.
<li>Поддержка шрифтов формата TTF при помощи библиотеки FreeType 2.
<li>Чтение графических файлов формата BMP, PCX, JPG, PNG и проч., поддерживаемых библиотекой SDL_image.
<li>Воспроизведение фоновой музыки и звуковых эффектов из файлов формата Waw, Mp3, Ogg и проч., поддерживаемых библиотекой SDL_mixer.
<li>Чтение ресурсов из zip-архивов. При желании можно добавить собственный плагин чтения из архива другого формата.
</ul>
</p>

<p>
Принципы:
<ul>
<li>Базовая "универсальная" идея установки переменных в классах через общие функции GetParam/SetParam, GetPtrParam/SetPtrParam
<li>Простая и, надеюсь, понятная архитектура с минимумом наворотов.
</ul>
</p>

<a name='list'><h2 class=header2>Инструменты разработки</h2></a>

<p>Для сборки движка из исходников вам необходимо:

<ul>
<li>для сборки под Win32 требуется компилятор <a href=http://www.mingw.org>MinGW</a> (в других собирать не пробовал)<br>
а в качестве среды разработки - <a href=http://www.bloodshed.net/devcpp.html>Dev-C++</a> или 
<a href=http://codeblocks.org>CodeBlocks</a> (в нем мне нравится возможность полной перекомпиляции всех проектов в workspace,
что отсутствует в Dev-C++)<br>
<li>для сборки под Linux - gcc, а так как make-файлы вручную делать влом
(а работа с autotools оказалась выше моего понимания), то применяю <a href=http://www.cmake.org>CMake</a>
</ul>
</p>

<p>В движке используются следующие сторонние библиотеки:
<ul>
<li>SDL, SDL_image, SDL_mixer, SDL_net. Если у вас их нет, то можно скачать <a href=http://libsdl.org>с официального сайта</a>
<li><a href=http://freetype.org>FreeType 2</a>
<li><a href=http://www.sourceforge.net/projects/tinyxml>tinyXML</a> (включена в исходники движка)
<li><a href=http://www.zlib.org>zlib</a> (включена в исходники движка)
<li><a href=http://www.lua.org>Lua</a> (включена в исходники движка)
</ul>
</p>

<p>Для разработки так же использовались:
<ul>
<li>Система контроля версий <a href=http://subversion.tigris.org/>SVN</a> 
(можно установить графический интерфейс <a href=http://tortoisesvn.tigris.org>Tortoise SVN</a> под Win32 )
<li>Векторный граф. редактор <a href=http://www.gnome.org/projects/dia/>Dia</a> для рисования поясняющих схем.
<li>Граф. редактор <a href=http://gimp.org>Gimp</a> для подготовки графических ресурсов.
</ul>
</p>

<a name='lyric'><h2 class=header2>Лирическое отступление</h2></a>

<p>Метаясь в своих разработках от изометрической РПГ к трехмерному шутеру, а от шутера к сетевой ММОРПГ
я заметил, что некоторые части кода можно переносить из одного проекта в другой без особых изменений.
Так в голову пришла идея - сделать проект, в котором были бы реализованы некоторые общие части,
входящие во все мои изыскания, на основе которых создавать проекты мне было бы легче, чем "с нуля".
Раньше склонялся больше к законченному движку, теперь - к фреймворку.
Поэтому за один из основных принципов разработки архитектуры данного проекта взял
наибольшую автономность составляющих модулей (по мере возможности, конечно),
чтобы  можно было использовать в других проектах.</p>

<p>Естественно, более высокоуровневые модули (например, модуль реализации узла сцены в виде 3ds-модели,
который вызывает для отрисовки функции модуля графики) так использовать не получится.
Да, можно сделать чтобы каждый узел сцены рисовал сам себя, используя исключительно вызовы графического API,
но мы потеряем время на лишние переключения между материалами и мешами, а также на установку
состояний отрисовки. Лучше все отправлять граф. менеджеру,
который перед непосредственно отрисовкой должен собирать все вызовы и 
упорядочить их для минимизации числа изменений параметров между отрисовками разных мешей.</p>

<p>При этом стоит учитывать, что чем больше мы получаем выигрыш в универсальности,
тем более неудобной становится оптимизация работы, да и вообще, работа с таким движком потребует
написания некоей надстройки, которая будет адаптировать этот движок
к тому, что нам от него действительно требуется. И чем универсальнее движок, тем эта надстройка
должна быть большего обьема. Поэтому, по-моему, собственно "универсальный" движок
с целью дальнейшего коммерческого применения делать бесмысленно - проще взять готовые графический, физический
и прочие фреймворки и соединить их в своей программе.</p>

<p>Я пытался сделать с одной стороны - максимально масштабируемый и универсальный,
а с другой - наиболее простой и понятный, без особых архитектурных изысков (ибо все эти модные
паттерны, синглтоны и смарт-поинтеры, конечно, круть и игра чистого разума,
но архитектура ради архитектуры навевает на меня жуткую скуку, и этого я старался избегать).</p>

</table>
<div>Powered by:
<A href="http://sourceforge.net"><IMG align=center src="http://sourceforge.net/sflogo.php?group_id=121759&amp;type=5" width="210" height="62" border="0" alt="SourceForge.net Logo" /></A>
</div>
</body>
</html>