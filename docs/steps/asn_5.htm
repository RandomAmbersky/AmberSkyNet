<!---                               +                                      --->
<html>
<head>
<title>[ AmberSkyNet VR ]</title>
<link rel=stylesheet type=text/css href=../ambernet.css>
</style>
</head>
<body>
<center>
<table width=80%><tr><td>
<h1 class=header1 align=center>[ AmberSkyNet VR ]</h1>
<blockquote>
</blockquote>

<p>После того, как загрузка Engine была отделена
от загрузки плагинов в отдельный модуль (EngineStarter)
системе плагинов оказалось грузить соверешнно нечего.<br>
Но сейчас мы исправим этот недостаток написанием модуля
лог-файла. Заодно продемонстрирую как просто добавлять новые классы менеджеров 
при подобной архитектуре - интерфейс IEngine остаётся практически без изменений :),
а также как просто включать и настраивать различные менеджеры логов используя
ini-файл.
</p>

<h3 class=header3 align=center>ILog</h3>
<p>Лог-файл может использоваться многими классами, поэтому для начала к нему
пишем интерфейс. Ну, примерно вот такого вида:</p>

<pre><b>
class ILog {
public:
<font color=green>// обычное сообщение кидаем в лог-файл</font>
virtual void LogMsg(const std::string& Msg)=0;
<font color=green>// вывод в специальный лог - требуется указать имя лог-файла</font>
virtual void ExtLogMsg(const std::string& LogName, const std::string& Msg)=0;
<font color=green>// сообщение об ошибке, level - уровень ошибки</font>
virtual void ErrMsg(int level,const std::string& Msg)=0;
};
</b></pre>

<h3 class=header3 align=center>CLog, CLogNo</h3>

<p>Реализация класса логов CLogNo - заглушка, никуда ничего не
выводящая.<br>Столкнулся с такой ситуацией, когда демка, созданная на предыдущей
версии движка (AmberSkyNet-3000) была записана на CD и по идее должна запускаться с него.
Но она не запускалась, т.к. запись в папку logs на CD была невозможна, а класс
логов не был вынесен в отдельную dll, как здесь. Поэтому всё вываливалось (хорошо,
была запись не на CD-R а на CD-RW) Пришлось на скорую руку 
писать инсталлятор (обошёлся обычным RAR-SFX).</p>

<p>Реализация класса логов СLog - уже нормальный менеджер логов,
выводящий сообщения в текстовые файлы.<br>
Конструктор CLog (на вход которому подаётся указатель на IEgine)
читает из IEngine путь к папке логов (переменная окружения <b>[Paths]LogPath</b>)
и пытается создать там файл с названием YYYYMMDDHHMiSS.log,
где YYYYMMDDHHMiSS - это текущие ГодМесяцДеньЧасМинутаСекунда.
Это имя файла он заносит в переменную окружения <b>[LogManager]LogName</b>.</p>

<p>Еще конструктор CLog читает из переменных окружения значения
<b>[LogManager]ShowTime</b> - надо ли к сообщениям в лог добавлять
время, когда они были записаны, и <b>[LogManager]ErrorLevel</b> - 
уровень вывода ошибок. Например, если уровень вывода задан в 9,
то ошибки 8-го уровня будут заноситься в лог-файл, а 10-го - нет.
Меняя эти значения в ini-файле мы можем разнообразить вид лога
без перекомпиляции исходников :)
</p>

<p>Плагин asnLog реализует генератор классов CLog и CLogNo,
о чём говорит строчка 
<pre><b>GeneratorInfo.type="LogTxt,LogNo";</b></pre>
в исходниках asnLog.cpp. При вызове функции класса-генератора GetClass()
с параметром "LogTxt" будет создан экземпляр класса CLog,
а при параметре "LogNo" - экземпляр класса CLogNo.
</p>

<p>Engine после разбора ini-файла читает значение переменной окружения <b>[Modules]LogManager</b>,
в которой хранится имя класса лог-файла, который будет использован
при текущем старте движка, и вызывает у менеджера плагинов функцию
GetClass() с этим параметром, надеясь получить от него указатель на созданный экземпляр класса такого типа.
Полученный указатель запоминается в указателях окружения с именем "LogManager",
получить извне доступ к нему можно например вот так:
<pre><b>(ILog*)ENGINE->GetPtrParam("LogManager");
</b></pre>
или воспользоваться макросами, определёнными в файле ILog.h :)
<pre><b>LOGGER->LOG("Тестовое сообщение в лог-файл");
</b></pre>
, но при этом каждый раз в указателях окружения будет искаться указатель
на экземпляр класса менеджера логов, что, возможно, не есть хорошо - это
небольшой недостаток подобной архитектуры :) Отказаться от поиска
можно, если в Engine хранить указатель на менеджер логов в отдельной
переменной, а получать его вызовом функции GetLog()...
</p>

<h3 class=header3 align=center>Подключение менеджеров</h3>
<p>А теперь - насколько просто включать различные менеджеры логов (да и не
только логов) при такой архитектуре:<br>
Если в ini-файле в разделе [Modules] задать например вот так:
<b><pre>...
[Modules]
...
LogManager=LogTxt
...</b></pre>
то Engine, прочитав данную строчку подаст на вход менеджеру плагинов параметр "LogTxt" получит
от него указатель на экземпляр класса CLog.<br>
Если нам надо вообще отключить лог - пользуемся классом-заглушкой CLogNo,
написав в ini-файле строчку:
<b><pre>...
[Modules]
...
LogManager=LogNo
...</b></pre>
Тогда Engine примет как менеджер логов экземпляр класса-заглушки CLogNo и логов
у нас вестись не будет. Причём создаваемые экземпляры 
классов менеджера логов видны как интерфейсный класс ILog, их внутреннее
строение от всех скрыто.
</p>

<p>Можно будет написать также и менеджеры логов в HTML или XML.
Причём имеется возможность вынести их в отдельные плагины, "обвязав"
соответствующими классами-генераторами.
</p>

<h3 class=header3 align=center>Адаптация под Linux</h3>
<p>После 4го шага и до начала 5го проведена небольшая адаптация движка 
под Linux (проверялась на ASP Linux 11), поэтому в исходниках появилась папка <b>CMake</b>
- для работы утилиты cmake в Linux. Пользовать СMake просто - в папке <b>CMake</b>
запускаем эту утилиту следующим образом :
<pre><b>&gt;cmake .</pre></b>
После чего в случае успешной обработки файла CMakeLists.txt
будет создан make-файл, который обработаем обычным образом - набрав
в консоли команду:<pre><b>&gt;make all</pre></b>
Исходники 5го шага под Linux пока не компилил ;)</p>

<h3 class=header3 align=center>Изменения в исходниках</h3>
<p><b>include/:</b> Добавлен интерфейс к менеджеру логов ILog.h</p>

<p><b>src/asnCommon/:</b> В файле утилитарных функций
добавлены функции StrToInt (инлайновая :) и IntToStr</p>

<p><b>src/asnMain/:</b>  демонстрация работы лог-файла
</p>

<p><b>src/asnLog/:</b> Новый (а вообще-то первый, т.к. asnEngine.dll грузится
по-особому) плагин!
</p>

<p>Исходники этого шага выложены в SVN. Скачать их можно набрав команду:
<pre>
<b>svn co https://svn.sourceforge.net/svnroot/ambernet/tags/AmberSkyNet-0.5 ambernet_0.5</b>
</pre>

</table>
<div>Powered by:
<A href="http://sourceforge.net"><IMG align=center src="http://sourceforge.net/sflogo.php?group_id=121759&amp;type=5" width="210" height="62" border="0" alt="SourceForge.net Logo" /></A>
</div>

</body>
</html>